<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>baekjoon on cjlee38</title>
    <link>http://cjlee38.github.io/tags/baekjoon/</link>
    <description>Recent content in baekjoon on cjlee38</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Jan 2021 22:17:00 +0000</lastBuildDate><atom:link href="http://cjlee38.github.io/tags/baekjoon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title># 백준[No.1676] - 팩토리얼 0의 개수 ( Java )</title>
      <link>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2021-01-02-problem_solving_22/</link>
      <pubDate>Sat, 02 Jan 2021 22:17:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2021-01-02-problem_solving_22/</guid>
      <description>문제링크
Problem Solve 접근 방법 : 문제를 푸는 원리만 이해하면, 구현은 쉽게 할수 있는 문제다.
우선, 주어진 문제의 이해를 위해 factorial(10) 을 구해보면, 3628800 이라는 숫자가 나온다. 그리고 가장 뒤쪽에서부터 0의 개수를 세보면, 2개 라는 정답을 얻을 수 있다.
그러나, 이를 직접 계산해서 0의 개수를 세는, 즉 시뮬레이션을 하게 되면 아주 치명적인 문제가 발생하는데, 문제의 입력 조건에서도 보이듯이 최대 factorial(500)까지 갈 수 있고, 이는
122013682599111006870123878542304692625357434280319284219241358838584537315388 199760549644750220328186301361647714820358416337872207817720048078520515932928 547790757193933060377296085908627042917454788242491272634430567017327076946106 280231045264421887878946575477714986349436778103764427403382736539747138647787 849543848959553753799042324106127132698432774571554630997720278101456108118837 370953101635632443298702956389662891165897476957208792692887128178007026517450 776841071962439039432253642260523494585012991857150124870696156814162535905669 342381300885624924689156412677565448188650659384795177536089400574523894033579 847636394490531306232374906644504882466507594673586207463792518420045936969298 102226397195259719094521782333175693458150855233282076282002340262690789834245 171200620771464097945611612762914595123722991334016955236385094288559201872743 379517301458635757082835578015873543276888868012039988238470215146760544540766 353598417443048012893831389688163948746965881750450692636533817505547812864000 000000000000000000000000000000000000000000000000000000000000000000000000000000 0000000000000000000000000000000000000000000</description>
    </item>
    
    <item>
      <title># 백준[No.1676] - 팩토리얼 0의 개수 ( Java )</title>
      <link>http://cjlee38.github.io/post/algorithm/problem_solving/2021-01-02-problem_solving_22/</link>
      <pubDate>Sat, 02 Jan 2021 22:17:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/problem_solving/2021-01-02-problem_solving_22/</guid>
      <description>문제링크
Problem Solve 접근 방법 : 문제를 푸는 원리만 이해하면, 구현은 쉽게 할수 있는 문제다.
우선, 주어진 문제의 이해를 위해 factorial(10) 을 구해보면, 3628800 이라는 숫자가 나온다. 그리고 가장 뒤쪽에서부터 0의 개수를 세보면, 2개 라는 정답을 얻을 수 있다.
그러나, 이를 직접 계산해서 0의 개수를 세는, 즉 시뮬레이션을 하게 되면 아주 치명적인 문제가 발생하는데, 문제의 입력 조건에서도 보이듯이 최대 factorial(500)까지 갈 수 있고, 이는
122013682599111006870123878542304692625357434280319284219241358838584537315388 199760549644750220328186301361647714820358416337872207817720048078520515932928 547790757193933060377296085908627042917454788242491272634430567017327076946106 280231045264421887878946575477714986349436778103764427403382736539747138647787 849543848959553753799042324106127132698432774571554630997720278101456108118837 370953101635632443298702956389662891165897476957208792692887128178007026517450 776841071962439039432253642260523494585012991857150124870696156814162535905669 342381300885624924689156412677565448188650659384795177536089400574523894033579 847636394490531306232374906644504882466507594673586207463792518420045936969298 102226397195259719094521782333175693458150855233282076282002340262690789834245 171200620771464097945611612762914595123722991334016955236385094288559201872743 379517301458635757082835578015873543276888868012039988238470215146760544540766 353598417443048012893831389688163948746965881750450692636533817505547812864000 000000000000000000000000000000000000000000000000000000000000000000000000000000 0000000000000000000000000000000000000000000</description>
    </item>
    
    <item>
      <title># 백준[No.10227] - 삶의 질 ( Java )</title>
      <link>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-11-06-problem_solving_18/</link>
      <pubDate>Fri, 06 Nov 2020 09:05:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-11-06-problem_solving_18/</guid>
      <description>문제 링크
Problem Solve : 처음에는 한 5분 정도는 문제가 무슨 뜻인지 잘 이해가 되지 않았다.
문제의 예제를 기준으로 설명하자면,
 R * C 크기의 2차원 배열에서, 각 배열의 요소는 1 ~ R * C 까지의 중복되지 않는 값을 가진다. H * W (H와 W는 홀수) 의 크기만큼의 영역이 여러 개 존재하는데, 그 중 중앙값이 가장 낮은 값을 골라야 한다.  즉, 문제의 예제를 기준으로 설명하자면,
5 11 12
17 18 2</description>
    </item>
    
    <item>
      <title># 백준[No.10227] - 삶의 질 ( Java )</title>
      <link>http://cjlee38.github.io/post/algorithm/problem_solving/2020-11-06-problem_solving_18/</link>
      <pubDate>Fri, 06 Nov 2020 09:05:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/problem_solving/2020-11-06-problem_solving_18/</guid>
      <description>문제 링크
Problem Solve : 처음에는 한 5분 정도는 문제가 무슨 뜻인지 잘 이해가 되지 않았다.
문제의 예제를 기준으로 설명하자면,
 R * C 크기의 2차원 배열에서, 각 배열의 요소는 1 ~ R * C 까지의 중복되지 않는 값을 가진다. H * W (H와 W는 홀수) 의 크기만큼의 영역이 여러 개 존재하는데, 그 중 중앙값이 가장 낮은 값을 골라야 한다.  즉, 문제의 예제를 기준으로 설명하자면,
5 11 12
17 18 2</description>
    </item>
    
    <item>
      <title># 백준[No.17144] - 미세먼지 안녕! ( Java )</title>
      <link>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-09-28-problem_solving_10/</link>
      <pubDate>Mon, 28 Sep 2020 21:00:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-09-28-problem_solving_10/</guid>
      <description>Problem {: .alignCenter}
Answer : 문제가 좀 복잡한데, 어쨌든 시뮬레이션으로 풀었다.
이 문제에서 신경써야 할 부분은, 보다시피 딱 두 가지다.
 미세먼지의 확산 공기청정기의 작동  처음에는 공기청정기가 로봇청소기처럼 돌아다니면서 청소하는 개념인줄 알았더니,
그게 아니고 제자리 Fix된 상태에서 공기를 순환시키는 방식으로 동작하는 것이었다.
아무튼, 하나씩 풀어보자.
미세먼지의 확산 : 미세먼지는 인접한 네 방향으로만 확산하고,
벽 혹은 공기청정기에 가로막혀 있으면 확산되지 않는다.
또한, 본래 자리에 있던 미세먼지는 빠져나간 미세먼지 만큼만
감소하므로, 이를 유의해야 한다.</description>
    </item>
    
    <item>
      <title># 백준[No.17144] - 미세먼지 안녕! ( Java )</title>
      <link>http://cjlee38.github.io/post/algorithm/problem_solving/2020-09-28-problem_solving_10/</link>
      <pubDate>Mon, 28 Sep 2020 21:00:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/problem_solving/2020-09-28-problem_solving_10/</guid>
      <description>Problem {: .alignCenter}
Answer : 문제가 좀 복잡한데, 어쨌든 시뮬레이션으로 풀었다.
이 문제에서 신경써야 할 부분은, 보다시피 딱 두 가지다.
 미세먼지의 확산 공기청정기의 작동  처음에는 공기청정기가 로봇청소기처럼 돌아다니면서 청소하는 개념인줄 알았더니,
그게 아니고 제자리 Fix된 상태에서 공기를 순환시키는 방식으로 동작하는 것이었다.
아무튼, 하나씩 풀어보자.
미세먼지의 확산 : 미세먼지는 인접한 네 방향으로만 확산하고,
벽 혹은 공기청정기에 가로막혀 있으면 확산되지 않는다.
또한, 본래 자리에 있던 미세먼지는 빠져나간 미세먼지 만큼만
감소하므로, 이를 유의해야 한다.</description>
    </item>
    
    <item>
      <title># 백준[No.17140] - 이차원 배열과 연산 ( Java )</title>
      <link>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-09-18-problem_solving_8/</link>
      <pubDate>Fri, 18 Sep 2020 20:12:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-09-18-problem_solving_8/</guid>
      <description>문제 링크
Problem {: .alignCenter}
Solve : 문제 자체를 푸는데도 꽤 걸렸지만, 쓸데 없는 부분에서 고생했던 문제라서, 살짝 열받아서 가져왔다.
문제의 지문 자체가 그리 어렵지는 않지만, 시뮬레이션해서 이를 만들어줘야 하기 때문에, 이 부분에서 난이도가 좀 오르는 것 같다.
접근 방법 : 다음의 순서를 반복하면 된다
 행과 열 중, size가 더 긴 곳(같다면 행)을 선택한다. 더 긴 곳을 기준으로 돌면서(즉, 행이라면 하나의 행을 가져와서) 정렬을 수행한다.  정렬은 &amp;ldquo;숫자의 등장 횟수를 기준으로 오름차순&amp;rdquo; 숫자의 등장 횟수가 같다면, 숫자 자체의 크기를 기준으로 오름차순   각 정렬을 수행하면서, 달라진 최대 길이를 구한다.</description>
    </item>
    
    <item>
      <title># 백준[No.17140] - 이차원 배열과 연산 ( Java )</title>
      <link>http://cjlee38.github.io/post/algorithm/problem_solving/2020-09-18-problem_solving_8/</link>
      <pubDate>Fri, 18 Sep 2020 20:12:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/problem_solving/2020-09-18-problem_solving_8/</guid>
      <description>문제 링크
Problem {: .alignCenter}
Solve : 문제 자체를 푸는데도 꽤 걸렸지만, 쓸데 없는 부분에서 고생했던 문제라서, 살짝 열받아서 가져왔다.
문제의 지문 자체가 그리 어렵지는 않지만, 시뮬레이션해서 이를 만들어줘야 하기 때문에, 이 부분에서 난이도가 좀 오르는 것 같다.
접근 방법 : 다음의 순서를 반복하면 된다
 행과 열 중, size가 더 긴 곳(같다면 행)을 선택한다. 더 긴 곳을 기준으로 돌면서(즉, 행이라면 하나의 행을 가져와서) 정렬을 수행한다.  정렬은 &amp;ldquo;숫자의 등장 횟수를 기준으로 오름차순&amp;rdquo; 숫자의 등장 횟수가 같다면, 숫자 자체의 크기를 기준으로 오름차순   각 정렬을 수행하면서, 달라진 최대 길이를 구한다.</description>
    </item>
    
    <item>
      <title># 백준[No.1748] - 수 이어 쓰기 1 ( Python )</title>
      <link>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-08-27-problem_solving_3/</link>
      <pubDate>Thu, 27 Aug 2020 23:58:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-08-27-problem_solving_3/</guid>
      <description>문제 링크
PROBLEM {: .alignCenter}
SOLVE : 이번 문제는 이해 하기에 그리 어렵지 않으므로, 바로 해결 방법으로 진행한다.
1) 첫 번째 방법 ( feat. Out of Memory ) : 첫 번째 잘못된 접근은, 모든 숫자를 다 구해서 String으로 캐스팅해서 리스트에 담은 뒤, 이를 모두 concatenate 하는 것이다. 문제를 그대로 이해하고 그대로 해결하고자 하는 것이다. N = int(input()) numbers = [str(i) for i in range(1, N+1)] print(len(&amp;#39;&amp;#39;.join(numbers))) 그러나, 입력의 최대 값이 1억이므로, 이를 모두 이어 붙이게 되면 굉~장히 긴 String이 등장할 것이다.</description>
    </item>
    
    <item>
      <title># 백준[No.1748] - 수 이어 쓰기 1 ( Python )</title>
      <link>http://cjlee38.github.io/post/algorithm/problem_solving/2020-08-27-problem_solving_3/</link>
      <pubDate>Thu, 27 Aug 2020 23:58:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/problem_solving/2020-08-27-problem_solving_3/</guid>
      <description>문제 링크
PROBLEM {: .alignCenter}
SOLVE : 이번 문제는 이해 하기에 그리 어렵지 않으므로, 바로 해결 방법으로 진행한다.
1) 첫 번째 방법 ( feat. Out of Memory ) : 첫 번째 잘못된 접근은, 모든 숫자를 다 구해서 String으로 캐스팅해서 리스트에 담은 뒤, 이를 모두 concatenate 하는 것이다. 문제를 그대로 이해하고 그대로 해결하고자 하는 것이다. N = int(input()) numbers = [str(i) for i in range(1, N+1)] print(len(&amp;#39;&amp;#39;.join(numbers))) 그러나, 입력의 최대 값이 1억이므로, 이를 모두 이어 붙이게 되면 굉~장히 긴 String이 등장할 것이다.</description>
    </item>
    
    <item>
      <title># 백준[No.2477] - 참외밭 ( python )</title>
      <link>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-08-27-problem_solving_2/</link>
      <pubDate>Thu, 27 Aug 2020 22:41:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup-copy/algorithm/problem_solving/2020-08-27-problem_solving_2/</guid>
      <description>문제 링크
PROBLEM {: .alignCenter} {: .alignCenter}
SOLVE ** 1) 주의사항** : 해당 문제에서 주의해야 할 요소는 다음과 같다.
 참외밭은 ㄱ자 모양, 혹은 이를 회전한 ┏, ┗, ┛ 모양의 육각형이다. 참외밭의 둘레를 돌면서 지나는 변의 방향은 반시계방향으로 주어진다. 변의 방향은 동,서,남,북 순서로 1,2,3,4의 값을 가진다. 출발 꼭지점은 &amp;ldquo;임의&amp;quot;로 주어진다.  2) 해결법 : 처음 문제를 보았을 때, 위 두가지 방법이 떠올랐다.
 1. 해당 모형의 육각형을 3등분하여 각 넓이를 구한뒤, 합산한다.</description>
    </item>
    
    <item>
      <title># 백준[No.2477] - 참외밭 ( python )</title>
      <link>http://cjlee38.github.io/post/algorithm/problem_solving/2020-08-27-problem_solving_2/</link>
      <pubDate>Thu, 27 Aug 2020 22:41:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/problem_solving/2020-08-27-problem_solving_2/</guid>
      <description>문제 링크
PROBLEM {: .alignCenter} {: .alignCenter}
SOLVE ** 1) 주의사항** : 해당 문제에서 주의해야 할 요소는 다음과 같다.
 참외밭은 ㄱ자 모양, 혹은 이를 회전한 ┏, ┗, ┛ 모양의 육각형이다. 참외밭의 둘레를 돌면서 지나는 변의 방향은 반시계방향으로 주어진다. 변의 방향은 동,서,남,북 순서로 1,2,3,4의 값을 가진다. 출발 꼭지점은 &amp;ldquo;임의&amp;quot;로 주어진다.  2) 해결법 : 처음 문제를 보았을 때, 위 두가지 방법이 떠올랐다.
 1. 해당 모형의 육각형을 3등분하여 각 넓이를 구한뒤, 합산한다.</description>
    </item>
    
  </channel>
</rss>
