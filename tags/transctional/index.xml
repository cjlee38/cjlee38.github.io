<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>transctional on cjlee38</title>
    <link>https://cjlee38.github.io/tags/transctional/</link>
    <description>Recent content in transctional on cjlee38</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cjlee38.github.io/tags/transctional/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title># 스프링 @Scheduled 와 @Transactional에 얽힌 이야기</title>
      <link>https://cjlee38.github.io/post/tech/spring/2022-08-21-spring-scheudeld-with-transactional/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cjlee38.github.io/post/tech/spring/2022-08-21-spring-scheudeld-with-transactional/</guid>
      <description>0. 서론 팀 프로젝트를 진행하면서, 특정 시간에 맞추어 Entity의 상태를 업데이트하고, 슬랙 메시지를 발송하는 기능을 개발하고 있었습니다. 제이슨이 추천해주신 여러가지 선택지 중에서, 러닝커브나 유지보수성을 감안하여 스프링의 스케줄링 기능을 활용하기로 결정했고, 약간의 학습 이후 본격적인 개발에 착수했습니다.
코드는 대략 다음과 같이 구성되어 있었습니다.
@Service @Transactional public class PollService {  	@Scheduled(cron = &amp;#34;0 0/1 * * * ?&amp;#34;) 	void notifyClosedByScheduled() { 	List&amp;lt;Poll&amp;gt; pollsToBeClosed = pollRepository.findAllToBeClosed(LocalDateTime.now()); 	for (Poll poll : pollsToBeClosed) { 	poll.</description>
    </item>
    
  </channel>
</rss>
