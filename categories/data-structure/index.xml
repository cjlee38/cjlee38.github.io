<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>data-structure on cjlee38</title>
    <link>http://cjlee38.github.io/categories/data-structure/</link>
    <description>Recent content in data-structure on cjlee38</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Sep 2020 19:38:00 +0000</lastBuildDate><atom:link href="http://cjlee38.github.io/categories/data-structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title># 마음으로 이해하는 자료구조 : Queue ( feat. C )</title>
      <link>http://cjlee38.github.io/backup/algorithm/data_structure/2020-09-21-what_is_queue/</link>
      <pubDate>Mon, 21 Sep 2020 19:38:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup/algorithm/data_structure/2020-09-21-what_is_queue/</guid>
      <description>0. 들어가며 : Stack과 Queue는 아주 기본 중의 기본인 자료구조이다.
아주 간단하므로, 사실 Stack과 Queue가 무엇인지에 대해서 이야기할 부분은 많지 않다.
따라서, 이번 포스팅은 코드 구현 위주로 작성할 것이다.
쓰다보니, 생각보다 포스팅이 또 길어져서, Stack과 Queue를 나누어서 작성했다.
지난 Stack편 에 이어집니다.
1. 이론 편 : Queue는, 편의점의 냉장고를 생각하면 된다.
편의점 알바를 해보면, 우리가 보고 있는 냉장고 뒤편은 냉장창고라는 것을 알 수 있다.
창고 뒤편에서, 냉장고에 음료수를 넣으면, 반대편에선 가장 먼저 넣은 것을 우선으로 꺼낼 수 있다.</description>
    </item>
    
    <item>
      <title># 마음으로 이해하는 자료구조 : Queue ( feat. C )</title>
      <link>http://cjlee38.github.io/post/algorithm/data_structure/2020-09-21-what_is_queue/</link>
      <pubDate>Mon, 21 Sep 2020 19:38:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/data_structure/2020-09-21-what_is_queue/</guid>
      <description>0. 들어가며 : Stack과 Queue는 아주 기본 중의 기본인 자료구조이다.
아주 간단하므로, 사실 Stack과 Queue가 무엇인지에 대해서 이야기할 부분은 많지 않다.
따라서, 이번 포스팅은 코드 구현 위주로 작성할 것이다.
쓰다보니, 생각보다 포스팅이 또 길어져서, Stack과 Queue를 나누어서 작성했다.
지난 Stack편 에 이어집니다.
1. 이론 편 : Queue는, 편의점의 냉장고를 생각하면 된다.
편의점 알바를 해보면, 우리가 보고 있는 냉장고 뒤편은 냉장창고라는 것을 알 수 있다.
창고 뒤편에서, 냉장고에 음료수를 넣으면, 반대편에선 가장 먼저 넣은 것을 우선으로 꺼낼 수 있다.</description>
    </item>
    
    <item>
      <title># 마음으로 이해하는 자료구조 : Stack ( feat. C )</title>
      <link>http://cjlee38.github.io/backup/algorithm/data_structure/2020-09-21-what_is_stack/</link>
      <pubDate>Mon, 21 Sep 2020 18:13:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup/algorithm/data_structure/2020-09-21-what_is_stack/</guid>
      <description>0. 들어가며 : Stack과 Queue는 아주 기본 중의 기본인 자료구조이다.
아주 간단하므로, 사실 Stack과 Queue가 무엇인지에 대해서 이야기할 부분은 많지 않다.
따라서, 이번 포스팅은 코드 구현 위주로 작성할 것이다.
쓰다보니, 생각보다 포스팅이 또 길어져서, Stack과 Queue를 나누어서 작성했다.
1. 이론 편 : Stack 이란 말 그대로, &amp;ldquo;쌓는 것&amp;quot;이다. 접시쌓기를 생각해보면 된다.
접시를 쌓을 때에는, 처음 혹은 중간에 끼워 넣을 수 없으며, 가장 상위에만 쌓아야 한다.
반대로, 꺼낼 때에도, 처음 혹은 중간에서 꺼낼 수 없으며, 가장 상위에서만 꺼내야 한다.</description>
    </item>
    
    <item>
      <title># 마음으로 이해하는 자료구조 : Stack ( feat. C )</title>
      <link>http://cjlee38.github.io/post/algorithm/data_structure/2020-09-21-what_is_stack/</link>
      <pubDate>Mon, 21 Sep 2020 18:13:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/data_structure/2020-09-21-what_is_stack/</guid>
      <description>0. 들어가며 : Stack과 Queue는 아주 기본 중의 기본인 자료구조이다.
아주 간단하므로, 사실 Stack과 Queue가 무엇인지에 대해서 이야기할 부분은 많지 않다.
따라서, 이번 포스팅은 코드 구현 위주로 작성할 것이다.
쓰다보니, 생각보다 포스팅이 또 길어져서, Stack과 Queue를 나누어서 작성했다.
1. 이론 편 : Stack 이란 말 그대로, &amp;ldquo;쌓는 것&amp;quot;이다. 접시쌓기를 생각해보면 된다.
접시를 쌓을 때에는, 처음 혹은 중간에 끼워 넣을 수 없으며, 가장 상위에만 쌓아야 한다.
반대로, 꺼낼 때에도, 처음 혹은 중간에서 꺼낼 수 없으며, 가장 상위에서만 꺼내야 한다.</description>
    </item>
    
    <item>
      <title># 마음으로 이해하는 자료구조 : LinkedList ( feat. C )</title>
      <link>http://cjlee38.github.io/backup/algorithm/data_structure/2020-09-10-what_is_linked_list/</link>
      <pubDate>Thu, 10 Sep 2020 01:51:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/backup/algorithm/data_structure/2020-09-10-what_is_linked_list/</guid>
      <description>0. 들어가며 : 개인적으로, C로 코딩을 시작했을 때 마주하는 가장 첫 번째 관문은 포인터라고 생각한다.
변수에 값을 담는다는 것은 알겠는데(그마저도 자유자재로 다루기가 어려웠지만),
주소값을 가리킨다는 말은, 번지 수라는 말을 붙여도 쉽게 와닿지는 않는 개념이다.
두 번째로 마주하는 관문은, 자료구조다.
기존에 변수, 배열, 구조체 등등이 충분히 모든 역할을 해줄 수 있을 것 같은데,
자료구조가 왜 필요한지, 무엇을 도와줄 수 있는지에 대해서 알기가 어렵다.
물론, 엄청난 과제와 학습량은 머릿속에 갓 넣은 지식을 강제로 손가락에 주입시켜준다.</description>
    </item>
    
    <item>
      <title># 마음으로 이해하는 자료구조 : LinkedList ( feat. C )</title>
      <link>http://cjlee38.github.io/post/algorithm/data_structure/2020-09-10-what_is_linked_list/</link>
      <pubDate>Thu, 10 Sep 2020 01:51:00 +0000</pubDate>
      
      <guid>http://cjlee38.github.io/post/algorithm/data_structure/2020-09-10-what_is_linked_list/</guid>
      <description>0. 들어가며 : 개인적으로, C로 코딩을 시작했을 때 마주하는 가장 첫 번째 관문은 포인터라고 생각한다.
변수에 값을 담는다는 것은 알겠는데(그마저도 자유자재로 다루기가 어려웠지만),
주소값을 가리킨다는 말은, 번지 수라는 말을 붙여도 쉽게 와닿지는 않는 개념이다.
두 번째로 마주하는 관문은, 자료구조다.
기존에 변수, 배열, 구조체 등등이 충분히 모든 역할을 해줄 수 있을 것 같은데,
자료구조가 왜 필요한지, 무엇을 도와줄 수 있는지에 대해서 알기가 어렵다.
물론, 엄청난 과제와 학습량은 머릿속에 갓 넣은 지식을 강제로 손가락에 주입시켜준다.</description>
    </item>
    
  </channel>
</rss>
